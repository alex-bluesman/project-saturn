#pragma once

#include <basetypes>
#include <system>

namespace saturn {

#define WriteArm64Reg(_reg, _val)				\
	do {							\
		uint64_t v = _val;				\
		asm volatile("msr " #_reg ", %0" : : "r" (v));	\
	} while (0)

#define ReadArm64Reg(_reg)					\
	({							\
		uint64_t v;					\
		asm volatile("mrs  %0, " #_reg : "=r" (v));	\
		v;						\
	})

struct AArch64_Regs {
	uint64_t	x0;
	uint64_t	x1;
	uint64_t	x2;
	uint64_t	x3;
	uint64_t	x4;
	uint64_t	x5;
	uint64_t	x6;
	uint64_t	x7;
	uint64_t	x8;
	uint64_t	x9;
	uint64_t	x10;
	uint64_t	x11;
	uint64_t	x12;
	uint64_t	x13;
	uint64_t	x14;
	uint64_t	x15;
	uint64_t	x16;
	uint64_t	x17;
	uint64_t	x18;
	uint64_t	x19;
	uint64_t	x20;
	uint64_t	x21;
	uint64_t	x22;
	uint64_t	x23;
	uint64_t	x24;
	uint64_t	x25;
	uint64_t	x26;
	uint64_t	x27;
	uint64_t	x28;
	uint64_t	x29;

	uint64_t	lr;
	uint64_t	sp;
	uint64_t	pc; // ELR_EL2
	uint64_t	cpsr;
} __packed;

// Let's use these wrappers to correclty expand macro parameters
// We need it to access GIC system registers
#define ReadICCReg(_reg)		ReadArm64Reg(_reg)	
#define WriteICCReg(_reg, _val)		WriteArm64Reg(_reg, _val)	

// GNU AS is not aware about GIC symbolic register names
#define ICC_PMR_EL1		s3_0_c4_c6_0
#define ICC_SRE_EL2		s3_4_c12_c9_5
#define ICC_SGI1R_EL1		s3_0_c12_c11_5
#define ICC_BPR1_EL1		s3_0_c12_c12_3
#define ICC_CTRL_EL1		s3_0_c12_c12_4
#define ICC_IGRPEN1_EL1		s3_0_c12_c12_7

}; // namespace saturn
