// Copyright (C) 2023 Alexander Smirnov <alex.bluesman.smirnov@gmail.com>
//
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Unless required by applicable law or agreed to in writing, software distributed 
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
// CONDITIONS OF ANY KIND, either express or implied. See the License for the 
// specific language governing permissions and limitations under the License.

#pragma once

#include <basetypes>

namespace saturn {

enum class rb {
	full_overwrite,
	full_ignore
};

// NOTE: ring buffer is not thread safe
template<typename T, size_t S>
class RingBuffer
{
public:
	RingBuffer(rb policy = rb::full_ignore, T* buf = nullptr)
		: Head(0)
		, Tail(0)
		, Size(S)
		, Fill(0)
		, Policy(policy)
	{
		if (nullptr == buf)
		{
			Buffer = new T[S];
			Extern = true;
		}
		else
		{
			Buffer = buf;
			Extern = false;
		}
	}

	~RingBuffer()
	{
		if (!Extern)
		{
			delete [] Buffer;
		}
	}

public:
	bool	In(T element)
	{

		bool ret = true;

		if (Fill < Size)
		{
			Buffer[Head] = element;
			Head = (Head + 1) % Size;
			Fill++;
		}
		else
		{
			if (Policy == rb::full_overwrite)
			{
				Buffer[Head] = element;
				Head = (Head + 1) % Size;
				Tail++;
			}
			else
			{
				ret = false;
			}
		}

		return ret;
	};

	bool	Out(T& element)
	{
		bool ret = true;

		if (Fill)
		{
			element = Buffer[Tail];
			Tail = (Tail + 1) % Size;
			Fill--;
		}
		else
		{
			ret = false;
		}

		return ret;
	}

	inline bool	Empty()
	{
		return (Fill == 0);
	}

private:
	T*	Buffer;
	bool	Extern;

	size_t	Head;
	size_t	Tail;
	size_t	Size;
	size_t	Fill;
	rb	Policy;
};

}; // namespace saturn
