#pragma once

#include <basetypes>

namespace saturn {

// Let's reuse some list implementation pieces from Linux kernel to implement low-level
// heap logic.

typedef struct list_head {
        struct list_head *next, *prev;
} list_head_t;

static inline void List_Init(list_head_t *head)
{
	if (head)
	{
        	head->prev = head;
        	head->next = head;
	}
}

static inline void List_Add(list_head_t *new_element, list_head_t *head)
{
        list_head_t *next = head->next;
        list_head_t *prev = head;

        next->prev = new_element;
        new_element->next = next;
        new_element->prev = prev;
        prev->next = new_element;
}

static inline void List_Del(list_head_t *entry)
{
	list_head *prev = entry->prev;
	list_head *next = entry->next;

	if (prev != entry && next != entry)
	{
		next->prev = prev;
		prev->next = next;
	}
}

#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

#define container_of(ptr, type, member) ({			\
	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
	(type *)( (char *)__mptr - offsetof(type,member) );})

#define List_Entry(ptr, type, member)				\
	container_of(ptr, type, member)

static size_t List_Size(list_head_t *head)
{
	size_t i = 0;
	list_head_t *it = head;
	
	while (it && it->next != head)
	{
		it = it->next;
		i++;
	}

	return i;
}

}; // namespace saturn
