// Copyright (C) 2023 Alexander Smirnov <alex.bluesman.smirnov@gmail.com>
//
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Unless required by applicable law or agreed to in writing, software distributed 
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
// CONDITIONS OF ANY KIND, either express or implied. See the License for the 
// specific language governing permissions and limitations under the License.

#pragma once

#include <core/immu>
#include <io>

namespace saturn {

class MMap {
public:
	struct IO_Region
	{
		uint64_t Base;
		size_t Size;
	};

public:
	MMap(const IO_Region& io, core::MMapType type = core::MMapType::Device)
		: Base(io.Base)
		, Size(io.Size)
		, Type(type)
	{
		// TBD: check return value
		core::MMU().MemoryMap(Base, Size, Type);
	};

	~MMap()
	{
		// TBD: check return value
		core::MMU().MemoryUnmap(Base, Size);
	};

public:
	template<typename T>
	inline T Read(uint64_t offset)
	{
		return saturn::Read<T>(Base + offset);
	};

	template<typename T>
	inline void Write(uint64_t offset, T data)
	{
		return saturn::Write<T>(Base + offset, data);
	};

private:
	uint64_t	Base;
	size_t		Size;
	core::MMapType	Type;
};

}; // namespace saturn
