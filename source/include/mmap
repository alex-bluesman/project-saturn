#pragma once

#include <immu>
#include <io>

namespace saturn {

namespace core {
	extern IMemoryManagementUnit* Saturn_MMU;
}; // namespace core

class MMap {
public:
	struct IO_Region
	{
		uint64_t Base;
		size_t Size;
	};

public:
	MMap(const IO_Region& io, MMapType type = MMapType::Device)
		: Base(io.Base)
		, Size(io.Size)
		, Type(type)
	{
		// TBD: check return value
		core::Saturn_MMU->MemoryMap(Base, Size, Type);
	};

	~MMap()
	{
		// TBD: check return value
		core::Saturn_MMU->MemoryUnmap(Base, Size);
	};

public:
	template<typename T>
	inline T Read(uint64_t offset)
	{
		return saturn::Read<T>(Base + offset);
	};

	template<typename T>
	inline void Write(uint64_t offset, T data)
	{
		return saturn::Write<T>(Base + offset, data);
	};

private:
	uint64_t	Base;
	size_t		Size;
	MMapType	Type;
};

}; // namespace saturn
